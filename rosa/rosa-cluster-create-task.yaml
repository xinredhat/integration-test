---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rosa-cluster-create-task
spec:
  results:
    - name: ocp-login-command
      description: The command to login to the created cluster
  params:
    - name: version
      type: string
      description: ocp cluster version that you want to create
    - name: region
      type: string
      description: ocp cluster region where you want to create
    - name: name
      type: string
      description: ocp cluster name that you want to create
    - name:  machine-type
      type: string
      description: ocp cluster machine type that you want to create
      default: "m5.2xlarge"
    - name: node_number
      type: string
      description: number of worker nodes to provision
      default: "3"
  volumes:
    - name: secret-volume
      secret:
        secretName: hcp-cluster-secret
  steps:
    - name: create-cluster
      image: quay.io/redhat-pipeline-service/ci-runner:main
      volumes:
        - name: secret-volume
          mountPath: /workspace
      env:
        - name: CLUSTER_NAME
          value: "$(params.name)"
        - name: REGION
          value: "$(params.region)"
        - name: OCP_VERSION
          value: "$(params.version)"
        - name: MACHINE_TYPE
          value: "$(params.machine-type)"
      script: |
        set -o errexit
        set -o nounset
        set -o pipefail

        config_aws_creds() {
            printf "INFO: Configure AWS Credentials...\n" 
            aws configure set aws_access_key_id $(cat /workspace/aws_access_key_id)
            aws configure set aws_secret_access_key $(cat /workspace/aws_secret_access_key)
            aws configure set region $(params.AWS_REGION)
        }

        print_debug_info() {
            printf "INFO: Print debug info......\n" 
            rosa --region "$REGION" describe cluster --cluster="$CLUSTER_NAME"
        }

        # Check all of clusteroperators are AVAILABLE
        check_clusteroperators() {
            operators="dns ingress network"
            for operator in $operators; do
                # need to check if the operator is available or not in a loop
                retries=0
                max_retries=25
                # if the operator is not available, wait 60s and check again
                while [ "$retries" -lt "$max_retries" ]; do
                    available=$(kubectl get co "$operator" -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
                    if [ "$available" == "True" ]; then
                        break
                    fi
                    sleep 60
                    retries=$((retries + 1))
                    echo "Retried $retries times..."
                done
                # if the operator is still not available after 10 times, exit 1
                if [ "$retries" -eq "$max_retries" ]; then
                    echo "ERROR: Operator $operator is not available" >&2
                    # print the status of all cluster operators
                    kubectl get co
                    # print the status of the failed cluster operator
                    kubectl get co "$operator" -o yaml
                    exit 1
                fi
            done
            echo "INFO: Operators [${operators}] are available"
            # for debugging purpose
            kubectl get co
        }

        get_hcp_full_version() {
            rosa_output=$(rosa list version --channel-group stable --region "$REGION" --hosted-cp -o json)
            raw_id=$(echo "$rosa_output" | jq -r "[.[].raw_id | select(startswith(\"$OCP_VERSION\"))] | max")
            HCP_FULL_VERSION="$raw_id"
            if [ -z "$HCP_FULL_VERSION" ]; then
                echo "Failed to get the HCP full version of $OCP_VERSION" >&2
                exit 1
            fi
        }

        deploy_cluster() {
            printf "INFO: Log in to your Red Hat account...\n" 
            config_aws_creds
            rosa login --token="$ROSA_TOKEN"

            printf "Create ROSA with HCP cluster...\n" 
            get_hcp_full_version
            rosa create cluster --cluster-name "$CLUSTER_NAME" \
                --sts --mode=auto --oidc-config-id $(cat /workspace/AWS_OIDC_CONFIG_ID) \
                --operator-roles-prefix $(cat /workspace/OPERATOR_ROLES_PREFIX) --region "$REGION" --version "$HCP_FULL_VERSION" \
                --role-arn $(cat /workspace/INSTALL_ROLE_ARN) \
                --support-role-arn $(cat /workspace/SUPPORT_ROLE_ARN) \
                --worker-iam-role "$(cat /workspace/WORKER_ROLE_ARN)" \
                --compute-machine-type "$MACHINE_TYPE" \
                --subnet-ids "$(cat /workspace/WORKER_ROLE_ARN)" \
                --billing-account $(cat /workspace/AWS_ACCOUNT_ID) \
                --replicas $(params.node_number)
                --hosted-cp -y

            printf "INFO: Track the progress of the cluster creation...\n" 
            rosa logs install --cluster="$CLUSTER_NAME" --region "$REGION" --watch

            printf "INFO: ROSA with HCP cluster is ready, create a cluster admin account for accessing the cluster\n" 
            admin_output="$(rosa create admin --region "$REGION" --cluster="$CLUSTER_NAME")"

            # Get the admin account credentials and API server URL
            admin_user="$(echo "$admin_output" | grep -oP '(?<=--username ).*(?= --password)')"
            admin_pass="$(echo "$admin_output" | grep -oP '(?<=--password ).*')"
            api_url="$(echo "$admin_output" | grep -oP '(?<=oc login ).*(?= --username)')"

            printf "INFO: Storing login command...\n"
            echo "oc login $api_url --username $admin_user --password $admin_pass" > $(results.ocp-login-command.path)

            # Use the admin account to login to the cluster in a loop until the account is active.
            max_retries=10
            retries=0
            export KUBECONFIG="$KUBECONFIG_DIR/config"
            while ! oc login "$api_url" --username "$admin_user" --password "$admin_pass" >/dev/null 2>&1; do
                if [ "$retries" -eq "$max_retries" ]; then
                    echo "ERROR: Failed to login the cluster." >&2
                    print_debug_info
                    exit 1
                fi
                sleep 60
                retries=$((retries + 1))
                echo "Retried $retries times..."
            done

            #Workaround: Check if apiserver is ready by calling kubectl get nodes
            if ! timeout 300s bash -c "while ! kubectl get nodes >/dev/null 2>/dev/null; do printf '.'; sleep 10; done"; then
                echo "ERROR: API server is not ready" >&2
                exit 1
            fi
            check_clusteroperators
        }

        deploy_cluster